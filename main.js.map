{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AACuD;;;AAEvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;gFAAhB,gBAAgB;6GAAhB,gBAAgB;iHAHjB,iEAAoB,CAAC,MAAM,CAAC,EAC5B,yDAAY;mIAEX,gBAAgB,oFAFjB,yDAAY;;;;;;;;;;;;;;;;;;;ACAjB,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,8BAA8B,CAAC;KACxC;;wEAFY,YAAY;0GAAZ,YAAY;QCPzB,yEAAuB;QAEnB,0FAA6D;QAC/D,4DAAM;QACN,yEAAyB;QACG,6FAAkC;QAAA,4DAAM;QAClE,yEAAuB;QACrB,2IACA;QAAA,gEAAM;QACN,yEAAmB;QAId,yEAAa;QAAA,4DACf;QACD,wEAGG;QAAA,8EAAkB;QAAA,4DACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBiD;AACD;AACD;AACT;AACgC;AAC6C;AAC1D;AACK;AAChB;AACA;AACI;AACI;AACV;;AAoB9C,MAAM,SAAS;;kEAAT,SAAS;sGAAT,SAAS,cAFR,wDAAY;0GAbtB,oEAAa;QACb,iEAAgB;QAChB,mEAAc;QACd,+DAAmB;QACnB,qEAAe;QACf,yEAAiB;QACjB,iEAAa;QACb,kEAAa;QACb,6EAAkB;QAClB,kFAAqB;QACrB,0FAAuB;mIAKd,SAAS,mBAjBL,wDAAY,EAAE,qIAAgC,aAE3D,oEAAa;QACb,iEAAgB;QAChB,mEAAc;QACd,+DAAmB;QACnB,qEAAe;QACf,yEAAiB;QACjB,iEAAa;QACb,kEAAa;QACb,6EAAkB;QAClB,kFAAqB;QACrB,0FAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3B3B;AAIA;AACA;;;;;;;;;;;;;;;;ACFM;AAAuC;AAAA;AAAA;AAAA;AAAA,aAAW,kFAAX;AAAwB,KAAxB;AACrC;AACA,iFAAsB,CAAtB,EAAsB,UAAtB;AACY;AAAM;;;;;AAFlB;AAAA;;;;;;;;AAgBF,+EAGC,CAHD,EAGC,YAHD,EAGC,EAHD,EAGC,CAHD,EAGC,KAHD,EAGC,EAHD;AAKmC;AAAA;AAAA;AAAA;AAAA,aAAS,2FAAT;AAA+B,KAA/B;AAC7B;AACE;AAAA,aAAS,uBAAT;AAAgC,KAAhC;AAIC;AAAW;;;;;;AAPN;AAAA;AAIN;AAAA,yGAAiC,eAAjC,EAAiC,MAAjC;AAGC;AAAA;;;;ADnBT,MAAO,gCAAP,CAAuC;AAU3C;AATA,8BAA+B,CAAC,wDAAD,EAAQ,wDAAR,CAA/B;AACA,qBAAY,IAAI,8DAAJ,CAAuB,EAAvB,CAAZ;AAEA,kBAAmB,EAAnB;AACA,qBAAsB,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,QAA3B,EAAqC,YAArC,CAAtB;AACA,0BAAsB,EAAtB;AAKE,SAAK,cAAL,GAAsB,KAAK,SAAL,CAAe,YAAf,CAA4B,IAA5B,CACpB,yDAAS,CAAC,IAAD,CADW,EAEpB,mDAAG,CAAE,KAAD,IACF,KAAK,GAAG,KAAK,OAAL,CAAa,KAAb,CAAH,GAAyB,KAAK,SAAL,CAAe,KAAf,EAD7B,CAFiB,CAAtB;AAMD;;AAED,KAAG,CAAC,KAAD,EAAyB;AAC1B,UAAM,KAAK,GAAG,CAAC,KAAK,CAAC,KAAN,IAAe,EAAhB,EAAoB,IAApB,EAAd;;AACA,QAAI,KAAJ,EAAW;AACT,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;AACD,SAAK,SAAL,CAAe,QAAf,CAAwB,IAAxB;AACD;;AAED,QAAM,CAAC,KAAD,EAAc;AAClB,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAAd;;AACA,QAAI,KAAK,IAAI,CAAb,EAAgB;AACd,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B;AACD;AACF;;AAED,UAAQ,CAAC,KAAD,EAAoC;AAC1C,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,CAAC,MAAN,CAAa,SAA9B;AACA,SAAK,SAAL,CAAe,QAAf,CAAwB,IAAxB;AACD;;AAED,SAAO,CAAC,KAAD,EAAoB,KAApB,EAAiC;AACtC,SAAK,CAAC,eAAN;AACA,SAAK,cAAL,CAAoB,KAApB,IAA6B,KAAK,cAAL,CAAoB,KAApB,IAA6B,KAA7B,GAAqC,IAAlE;AACA,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAAd;;AACA,QAAI,KAAK,IAAI,CAAb,EAAgB;AACd,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B;AACD,KAFD,MAEO;AACL,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;AACF;;AAEO,SAAO,CAAC,KAAD,EAAc;AAC3B,UAAM,WAAW,GAAG,KAAK,CAAC,WAAN,EAApB;AAEA,WAAO,KAAK,SAAL,CAAe,MAAf,CAAuB,KAAD,IAC3B,KAAK,CAAC,WAAN,GAAoB,QAApB,CAA6B,WAA7B,CADK,CAAP;AAGD;;AAxD0C;;;mBAAhC;AAAgC;;;QAAhC;AAAgC;AAAA;AAAA;;;;;;;;;;;;;;;ACb7C,6EAAK,CAAL,EAAK,gBAAL,EAAK,CAAL,EAAK,CAAL,EAAK,WAAL;AAEe;AAAe;AAC1B;AACE;AAMA;AAOE;AAAA,eAAwB,eAAxB;AAAmC,OAAnC;AAPF;AAUF;AACE;;AAgBF;;;;;;;;AAjC8B;AAAA;AAS1B;AAAA,6FAAyB,iBAAzB,EAAyB,GAAzB,EAAyB,iBAAzB,EAAyB,GAAzB,EAAyB,+BAAzB,EAAyB,sBAAzB;AAUkB;AAAA;;;;;;;;;;;;;;;;;;;ACvB1B,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,sEAAsE;;;;;;;;;;;;;;;;;ACfvB;AAGF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/multiselect-autocomplete/multiselect-autocomplete.component.ts","./src/app/components/multiselect-autocomplete/multiselect-autocomplete.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'mat-autocomplete-multiselect';\n}\n","<div class=\"container\">\n  <div class=\"multiselect-container\">\n    <app-multiselect-autocomplete></app-multiselect-autocomplete>\n  </div>\n  <div class=\"description\">\n    <div class=\"desc-heading\">Material Multi Select Autocomplete</div>\n    <div class=\"desc-body\">\n      This is a ✨ hacked ✨ version of a native Angular Material Component.\n      <br />\n      <div class=\"links\">\n        <a\n          href=\"https://github.com/gauravbnsl/mat-autocomplete-multiselect\"\n          target=\"_blank\"\n          >Code (Github)</a\n        >\n        <a\n          href=\"https://material.angular.io/components/chips/overview#chips-autocomplete\"\n          target=\"_blank\"\n          >Original Component</a\n        >\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MultiselectAutocompleteComponent } from './components/multiselect-autocomplete/multiselect-autocomplete.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AppComponent, MultiselectAutocompleteComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatChipsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatAutocompleteModule,\n    BrowserAnimationsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { Observable } from 'rxjs';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { map, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-multiselect-autocomplete',\n  templateUrl: './multiselect-autocomplete.component.html',\n  styleUrls: ['./multiselect-autocomplete.component.scss'],\n})\nexport class MultiselectAutocompleteComponent {\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruitCtrl = new UntypedFormControl('');\n  filteredFruits: Observable<string[]>;\n  fruits: string[] = [];\n  allFruits: string[] = ['Apple', 'Lemon', 'Lime', 'Orange', 'Strawberry'];\n  selectedFruits: any = {};\n\n  @ViewChild('fruitInput') fruitInput: ElementRef<HTMLInputElement> | undefined;\n\n  constructor() {\n    this.filteredFruits = this.fruitCtrl.valueChanges.pipe(\n      startWith(null),\n      map((fruit: string | null) =>\n        fruit ? this._filter(fruit) : this.allFruits.slice()\n      )\n    );\n  }\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n    if (value) {\n      this.fruits.push(value);\n    }\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit: string): void {\n    const index = this.fruits.indexOf(fruit);\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.fruits.push(event.option.viewValue);\n    this.fruitCtrl.setValue(null);\n  }\n\n  onClick(event: MouseEvent, fruit: string) {\n    event.stopPropagation();\n    this.selectedFruits[fruit] = this.selectedFruits[fruit] ? false : true;\n    const index = this.fruits.indexOf(fruit);\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    } else {\n      this.fruits.push(fruit);\n    }\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allFruits.filter((fruit) =>\n      fruit.toLowerCase().includes(filterValue)\n    );\n  }\n}\n","<div>\n  <mat-form-field class=\"example-chip-list\" appearance=\"fill\">\n    <mat-label>Favorite Fruits</mat-label>\n    <mat-chip-list #chipList aria-label=\"Fruit selection\">\n      <mat-chip *ngFor=\"let fruit of fruits\" (removed)=\"remove(fruit)\">\n        {{ fruit }}\n        <button matChipRemove>\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip>\n      <input\n        placeholder=\"New fruit...\"\n        #fruitInput\n        [formControl]=\"fruitCtrl\"\n        [matAutocomplete]=\"auto\"\n        [matChipInputFor]=\"chipList\"\n        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (matChipInputTokenEnd)=\"add($event)\"\n      />\n    </mat-chip-list>\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <div\n        class=\"options-container\"\n        *ngFor=\"let fruit of filteredFruits | async\"\n      >\n        <mat-option [value]=\"fruit\">\n          <div class=\"options-container\" (click)=\"onClick($event, fruit)\">\n            <mat-checkbox\n              (click)=\"$event.preventDefault()\"\n              [checked]=\"selectedFruits[fruit]\"\n              [disableRipple]=\"'true'\"\n              color=\"primary\"\n              >{{ fruit }}</mat-checkbox\n            >\n          </div>\n        </mat-option>\n      </div>\n    </mat-autocomplete>\n  </mat-form-field>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}